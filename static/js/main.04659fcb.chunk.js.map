{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","className","children","StartScreen","changePage","listOfEntries","setListOfEntries","React","useState","entry","setEntry","onSubmit","evt","preventDefault","submitNewEntry","type","value","onChange","target","length","onClick","PlayScreen","App","page","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,4HCO3C,SAASC,EAAQC,GACf,OACE,0CAAQC,UAAU,UAAaD,GAC1BA,EAAME,UAef,SAASC,EAAT,GAAsE,IAA/CC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,iBAAmB,EACzCC,IAAMC,SAAS,IAD0B,mBAC5DC,EAD4D,KACrDC,EADqD,KAGnE,OACE,yBAAKT,UAAU,OACb,0BAAMU,SAAU,SAAAC,GAAG,OAdzB,SAAwBA,EAAKH,EAAOJ,EAAeC,EAAkBI,GAEnE,GADAE,EAAIC,kBACCJ,EAAO,OAAO,EAEnBH,EAAiB,GAAD,mBAAKD,GAAL,CAAoBI,KACpCC,EAAS,IASkBI,CAAeF,EAAKH,EAAOJ,EAAeC,EAAkBI,KACjF,4CAEE,2BACEK,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAAAL,GAAG,OAAIF,EAASE,EAAIM,OAAOF,WAGzC,kBAACjB,EAAD,CAAQgB,KAAK,UAAb,iBASF,mDACsBV,EAAcc,QAGpC,kBAACpB,EAAD,CAAQqB,QAAS,kBAAMhB,EAAW,UAAlC,eAMN,SAASiB,EAAT,GAAsC,EAAhBhB,cACpB,OACE,2CAoBWiB,MAhBf,WAAiB,IAAD,EACaf,IAAMC,SAAS,SAD5B,mBACPe,EADO,KACDnB,EADC,OAE4BG,IAAMC,SAAS,IAF3C,mBAEPH,EAFO,KAEQC,EAFR,KAId,MAAa,UAATiB,EACK,kBAACpB,EAAgB,CAACC,aAAYC,gBAAeC,qBAEpC,SAATiB,EACA,kBAACF,EAAD,MAGA,yCC/DSG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.04659fcb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n// import _ from 'lodash'\n\nimport logo from './logo.svg'\nimport './App.css'\n\n\nfunction Button (props) {\n  return (\n    <button className=\"button\" {...props}>\n        {props.children}\n    </button>\n  )\n}\n\n\nfunction submitNewEntry(evt, entry, listOfEntries, setListOfEntries, setEntry) {\n  evt.preventDefault()\n  if (!entry) return false\n\n  setListOfEntries([...listOfEntries, entry])\n  setEntry('')\n}\n\n\nfunction StartScreen ({changePage, listOfEntries, setListOfEntries}) {\n  const [entry, setEntry] = React.useState('')\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={evt => submitNewEntry(evt, entry, listOfEntries, setListOfEntries, setEntry)}>\n        <label>\n          New entry:\n          <input\n            type=\"text\"\n            value={entry}\n            onChange={evt => setEntry(evt.target.value)}\n          />\n        </label>\n        <Button type=\"submit\">Submit Entry</Button>\n      </form>\n\n      {\n      // put back in if you want to see the list of entries\n      //   <ul>\n      //   {listOfEntries.map((item)=><li>{item}</li>)}\n      // </ul>\n      }\n      <div>\n        Number of entries: {listOfEntries.length}\n      </div>\n\n      <Button onClick={() => changePage('play')}>Start Game</Button>\n    </div>\n  )\n}\n\n\nfunction PlayScreen ({listOfEntries}) {\n  return (\n    <div>PLAY BALL!</div>\n  )\n}\n\nfunction App () {\n  const [page, changePage] = React.useState('start')\n  const [listOfEntries, setListOfEntries] = React.useState([])\n\n  if (page === 'start') {\n    return <StartScreen {...{changePage, listOfEntries, setListOfEntries}} />\n  }\n  else if (page === 'play') {\n    return <PlayScreen />\n  }\n  else {\n    return <div>nothing</div>\n  }\n  \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}